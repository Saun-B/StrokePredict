import json

# Load rules v√† sources t·ª´ JSON
# try:
#     with open('rules.json', 'r') as f:
#         data = json.load(f)
#         rules = data['rules']
#         sources = data.get('sources', {})
#     print(f"Loaded {len(rules)} rules and {len(sources)} sources successfully from rules.json")
# except FileNotFoundError:
#     print("L·ªói: Kh√¥ng t√¨m th·∫•y rules.json. T·∫°o file tr∆∞·ªõc!")
#     exit(1)
# except json.JSONDecodeError as e:
#     print(f"L·ªói JSON: {e}. Ki·ªÉm tra syntax rules.json!")
#     exit(1)
import os

base_dir = os.path.dirname(__file__)
json_path = os.path.join(base_dir, "rules.json")

try:
    with open(json_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
        rules = data['rules']
        sources = data.get('sources', {})
    print(f"Loaded {len(rules)} rules and {len(sources)} sources successfully from rules.json")
except FileNotFoundError:
    print("L·ªói: Kh√¥ng t√¨m th·∫•y rules.json. T·∫°o file tr∆∞·ªõc!")
    exit(1)
except json.JSONDecodeError as e:
    print(f"L·ªói JSON: {e}. Ki·ªÉm tra syntax rules.json!")
    exit(1)

def calculate_bmi(weight, height):
    """T√≠nh BMI = weight (kg) / (height (m) * height (m))"""
    if height <= 0:
        return 22  # Default BMI n·∫øu chi·ªÅu cao kh√¥ng h·ª£p l·ªá
    bmi = weight / (height * height)
    print(f"BMI calculated: {bmi:.1f} (weight={weight}kg, height={height}m)")
    return bmi

def evaluate_risk(input_data):
    # Default cho input thi·∫øu
    input_data = input_data.copy()
    input_data.setdefault('age', 30)
    input_data.setdefault('hypertension', 0)
    input_data.setdefault('heart_disease', 0)
    input_data.setdefault('diabetes', 0)  
    input_data.setdefault('smoking_status', 'never smoked')
    input_data.setdefault('exercise', 1)
    input_data.setdefault('gender', 'Female')

    # T√≠nh BMI n·∫øu c√≥ weight v√† height
    if 'weight' in input_data and 'height' in input_data:
        input_data['bmi'] = calculate_bmi(input_data['weight'], input_data['height'])
    else:
        input_data.setdefault('bmi', 22)  # Default BMI n·∫øu kh√¥ng t√≠nh

    for rule in rules:
        try:
            if eval(rule['condition'], {"__builtins__": {}}, input_data):
                source_list = [f"{key} - {value}" for key, value in sources.items()]
                source_text = "\n\t".join(source_list)
                print(f"\nK·∫øt qu·∫£: Rule {rule['id']} activated: {rule['condition']}")
                print(f"Nguy c∆°: {rule['risk_level']}")
                print(f"Ngu·ªìn:\t{source_text}")
                return rule['risk_level'].capitalize()
        except Exception as e:
            print(f"Error in evaluating rule {rule['id']}: {e}")
            continue
    print("\nK·∫øt qu·∫£: Default rule activated (Low risk)")
    return "Low"

def get_advice(risk):
    """Tr·∫£ v·ªÅ l·ªùi khuy√™n d·ª±a tr√™n m·ª©c nguy c∆°"""
    if risk == "Low":
        return """
üåø Khuy·∫øn ngh·ªã s·ª©c kh·ªèe cho b·∫°n:
- Duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh: ƒÉn u·ªëng c√¢n ƒë·ªëi, t·∫≠p luy·ªán ƒë·ªÅu ƒë·∫∑n, v√† kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥.
- Gi·ªØ c√¢n n·∫∑ng v√† ch·ªâ s·ªë BMI trong gi·ªõi h·∫°n l√Ω t∆∞·ªüng (<25) b·∫±ng ch·∫ø ƒë·ªô ƒÉn √≠t ƒë∆∞·ªùng, √≠t ch·∫•t b√©o v√† v·∫≠n ƒë·ªông ƒë·ªÅu.
- Tr√°nh thu·ªëc l√°, h·∫°n ch·∫ø cƒÉng th·∫≥ng v√† duy tr√¨ th√≥i quen ng·ªß ngh·ªâ h·ª£p l√Ω ƒë·ªÉ b·∫£o v·ªá s·ª©c kh·ªèe l√¢u d√†i."""
    elif risk == "Medium":
        return """
‚ö†Ô∏è Khuy·∫øn ngh·ªã s·ª©c kh·ªèe cho b·∫°n:
- Tham kh·∫£o √Ω ki·∫øn b√°c sƒ© ƒë·ªÉ ki·ªÉm tra chi ti·∫øt h∆°n, ƒë·∫∑c bi·ªát n·∫øu b·∫°n c√≥ ti·ªÅn s·ª≠ gia ƒë√¨nh ho·∫∑c c√°c y·∫øu t·ªë nh∆∞ huy·∫øt √°p cao.
- TƒÉng c∆∞·ªùng t·∫≠p th·ªÉ d·ª•c √≠t nh·∫•t 150 ph√∫t m·ªói tu·∫ßn (v√≠ d·ª•: ƒëi b·ªô nhanh, b∆°i l·ªôi) v√† c√¢n nh·∫Øc gi·∫£m c√¢n n·∫øu BMI trong kho·∫£ng 25 ƒë·∫øn 30.
- H·∫°n ch·∫ø mu·ªëi, ƒë∆∞·ªùng, ch·∫•t b√©o b√£o h√≤a; ∆∞u ti√™n rau xanh, tr√°i c√¢y, th·ª±c ph·∫©m gi√†u ch·∫•t x∆° v√† u·ªëng ƒë·ªß n∆∞·ªõc."""
    elif risk == "High":
        return """
üö® Khuy·∫øn ngh·ªã s·ª©c kh·ªèe cho b·∫°n:
- Li√™n h·ªá ngay v·ªõi b√°c sƒ© ƒë·ªÉ thƒÉm kh√°m v√† ƒë√°nh gi√° nguy c∆° chuy√™n s√¢u, ƒë·∫∑c bi·ªát n·∫øu b·∫°n c√≥ b·ªánh l√Ω n·ªÅn nh∆∞ ti·ªÉu ƒë∆∞·ªùng, tim m·∫°ch, ho·∫∑c huy·∫øt √°p cao.
- Gi·∫£m ngay c√°c y·∫øu t·ªë r·ªßi ro: ng·ª´ng h√∫t thu·ªëc, ki·ªÉm so√°t c√¢n n·∫∑ng (nh·∫Øm BMI <25), v√† t·∫≠p luy·ªán nh·∫π nh√†ng d∆∞·ªõi h∆∞·ªõng d·∫´n chuy√™n m√¥n.
- Theo d√µi s·ª©c kh·ªèe ƒë·ªãnh k·ª≥ (huy·∫øt √°p, ƒë∆∞·ªùng huy·∫øt) v√† tu√¢n th·ªß ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã n·∫øu ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh; duy tr√¨ ch·∫ø ƒë·ªô ƒÉn u·ªëng v√† sinh ho·∫°t h·ª£p l√Ω."""
    return ""

if __name__ == "__main__":
    print("=== H·ªá chuy√™n gia ch·∫©n ƒëo√°n nguy c∆° ƒë·ªôt qu·ªµ ===\n")
    print("Nh·∫≠p th√¥ng tin c·ªßa b·∫°n (·∫•n Enter ƒë·ªÉ d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh):\n")

    # Nh·∫≠p th·ªß c√¥ng c√°c ti√™u ch√≠
    age = input("Tu·ªïi (s·ªë): ") or 30
    gender = input("Gi·ªõi t√≠nh (Male/Female): ") or "Female"
    hypertension = input("B·∫°n c√≥ b·ªã cao huy·∫øt √°p kh√¥ng? (0: Kh√¥ng, 1: C√≥): ") or 0
    heart_disease = input("B·∫°n c√≥ b·ªã b·ªánh tim m·∫°ch kh√¥ng? (0: Kh√¥ng, 1: C√≥): ") or 0
    diabetes = input("B·∫°n c√≥ b·ªã ti·ªÉu ƒë∆∞·ªùng kh√¥ng? (0: Kh√¥ng, 1: C√≥): ") or 0 
    smoking_status = input("T√¨nh tr·∫°ng h√∫t thu·ªëc (smokes/formerly smoked/never smoked): ") or "never smoked"
    exercise = input("B·∫°n c√≥ th∆∞·ªùng xuy√™n t·∫≠p th·ªÉ d·ª•c kh√¥ng? (0: Kh√¥ng, 1: C√≥): ") or 1
    weight = input("Nh·∫≠p c√¢n n·∫∑ng (kg): ") or 60
    height = input("Nh·∫≠p chi·ªÅu cao (m): ") or 1.7

    # Chuy·ªÉn ƒë·ªïi th√†nh s·ªë ho·∫∑c string h·ª£p l·ªá
    try:
        age = int(age)
        hypertension = int(hypertension)
        heart_disease = int(heart_disease)
        diabetes = int(diabetes)  
        exercise = int(exercise)
        weight = float(weight)
        height = float(height)
    except ValueError:
        print("L·ªói: Nh·∫≠p s·ªë kh√¥ng h·ª£p l·ªá, d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh!")
        age, hypertension, heart_disease, diabetes, exercise, weight, height = 30, 0, 0, 0, 1, 60, 1.7

    # T·∫°o input_data t·ª´ input
    input_data = {
        "age": age,
        "gender": gender,
        "hypertension": hypertension,
        "heart_disease": heart_disease,
        "diabetes": diabetes, 
        "smoking_status": smoking_status,
        "exercise": exercise,
        "weight": weight,
        "height": height
    }

    # ƒê√°nh gi√° nguy c∆°
    risk = evaluate_risk(input_data)
    print(f"\nT√≥m t·∫Øt: Tu·ªïi={age}, Gi·ªõi t√≠nh={gender}, Nguy c∆°={risk}")
    advice = get_advice(risk)
    print(advice)